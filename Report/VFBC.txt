The VFBC writes directly on external memory. To use the VFBC, it needs to be enabled, therefore a DDR2 memory controller needs to be integrated into the system. To enable VFBC:
Double click DDR2 SDRAM controller → change input of an inactive port to VFBC → Port configuration → Configure desired port width etc. 

Information on how the VFBC works:
data sheet mpmc, p 177 ff. 

VFBC PIM I/O Signals with more information found p. 37 ff. 
1. The VFBC Reset and Flush inputs must be held high for at least two MPMC_Clk0 cycles. Because these inputs could be controlled from a different 
clock domain than the MPMC_Clk0, the relative frequency of the reset/flush clock domain must be taken into account when determining the number of clock cycles to assert the reset or flush and to wait after reset or flush. The following equation is used to determine the number of clock cycles to 
hold the reset or flush input high: 2*(VFBC_Clk_Freq/MPMC_Clk0_Freq) 
2. After reset, there should not be any accesses to the VFBC interfaces for 6 MPMC_Clk cycles. 
3. After flush, there should not be any accesses to the VFBC interfaces for 6 MPMC_Clk cycles.

The project System_VFBC contains a state machine which controls the VFBC write interface and a test bench. When the center button is pushed, the write FIFO and the command FIFO are reset. After the following vsync high, the write enable signal goes high. After the next vsync signal it is set to low again. So one picture is supposed to be read from the FIFO.

The state machine actually works as I got to write data into the memory. 
Debug LEDs:
transfer done (state machine) : west
write fifo full: center
command fifo full: south
commend idle: east
write data (write enable) : north

This should be pointed out when working with the VBCD: (data sheet MPMC, p 178)
The X Size, Start Address and Stride must be aligned to a 32-word boundary. These values must be a multiple of 128 bytes and require that bits [6:0] be '0'. 

October 2012:
Reading out from vfbc worked for following code:
		when WT_WRITE_Word_1 =>
				-- write x size in bytes
				DDR2_SDRAM_VFBC2_Cmd_Data_pin_o <= std_logic_vector( to_unsigned (640, 32) );
				DDR2_SDRAM_VFBC2_Cmd_Write_pin_o <= '1';
			when WT_WRITE_Word_2 =>
				-- bit 31: 1 means write command; 30-0: start address 
				DDR2_SDRAM_VFBC2_Cmd_Data_pin_o(31) <= '1';
				DDR2_SDRAM_VFBC2_Cmd_Data_pin_o(30 downto 0) <= (others => '0');
				DDR2_SDRAM_VFBC2_Cmd_Write_pin_o <= '1';
			when WT_WRITE_Word_3 =>
				-- write number of lines
				DDR2_SDRAM_VFBC2_Cmd_Data_pin_o <= std_logic_vector( to_unsigned (479, 32) );
				DDR2_SDRAM_VFBC2_Cmd_Write_pin_o <= '1';
			when WT_WRITE_Word_4 =>
				-- write stride
				DDR2_SDRAM_VFBC2_Cmd_Data_pin_o <= std_logic_vector( to_unsigned (768, 32) );
				DDR2_SDRAM_VFBC2_Cmd_Write_pin_o <= '1';
			when WT_WAIT_FOR_VSYNC =>


Helpful exaples regarding set up are in mpmc data sheet p. 180 ff.

Problem: 
Not even half of the ram is filled with data.
Solution?
DDR2_SDRAM_VFBC2_Wd_Write_pin signal is 'bad' 
--> check signal itself
--> check edge detection
If signal is not bad, a write flag that appears every 4 clock cycles might be too fast. 
